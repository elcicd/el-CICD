<flow-definition plugin="workflow-job">
    <displayName>%MICROSERVICE_NAME%-build-to-dev</displayName>
    <keepDependencies>false</keepDependencies>
    <properties>
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty />
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.StringParameterDefinition>
                    <name>SCM_BRANCH</name>
                    <description>Git branch to build</description>
                    <defaultValue>%SCM_BRANCH%</defaultValue>
                    <trim>true</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.StringParameterDefinition>
                    <name>DEPLOY_TO_NAMESPACE</name>
                    <description>Namespace to deploy to (must be the dev environment or sandbox namespace)</description>
                    <defaultValue>%DEV_NAMESPACE%</defaultValue>
                    <trim>true</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.BooleanParameterDefinition>
                    <name>RECREATE</name>
                    <description>From OpenShift Build Environment Variable</description>
                    <defaultValue>false</defaultValue>
                </hudson.model.BooleanParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
        <script>  
            node() {
                def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${EL_CICD_META_INFO_NAME} -o json")))
  
                def scmMap = [$class: 'GitSCMSource',
                              remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                              credentialsId: cicdMetaData.data.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                library(identifier: "el-CICD@${cicdMetaData.data.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))
  
                el.initMetaData(cicdMetaData.data)
            }
  
            def args = [agent: '%CODE_BASE%',
                        isBuild: true,
                        pipelineName: 'build-to-dev',
                        projectId: '%PROJECT_ID%',
                        microServiceName: '%MICROSERVICE_NAME%',
                        deployToNamespace: params.DEPLOY_TO_NAMESPACE,
                        scmBranch: params.SCM_BRANCH,
                        recreate: params.RECREATE]
            el.node(args) {
                buildToDev(args)
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers />
    <authToken>%WEB_TRIGGER_AUTH_TOKEN%</authToken>
    <disabled>false</disabled>
</flow-definition>