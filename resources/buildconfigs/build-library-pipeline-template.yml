# SPDX-License-Identifier: LGPL-2.1-or-later

kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: build-library-template
parameters:
- name: EL_CICD_META_INFO_NAME
  description: Name oc config map holding el-CICD meta-info
  displayName: EL_CICD_META_INFO_NAME
  required: true
- name: PIPELINE_TEMPLATE_NAME
  description: Pipeline Template Name
  displayName: PIPELINE_TEMPLATE_NAME
  required: true
  value: build-library
- name: PROJECT_ID
  description: Project ID for microservice.
  displayName: Project ID
  required: true
- name: LIBRARY_GIT_REPO
  description: Name of git repository microservice is hosted.
  displayName: Git Repository
  required: true
- name: LIBRARY_NAME
  description: Name of microservice (k8s appropriate name from git repo name)
  displayName: Microservice Name
  required: true
- name: GIT_BRANCH
  description: Default branch to check out for build
  displayName: Git Repository
  required: true
  value: development
- name: CODE_BASE
  description: Code base of build; e.g. maven, gradle, python, etc.
  displayName: Git Repository
  required: true
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${PROJECT_ID}-${LIBRARY_NAME}-${PIPELINE_TEMPLATE_NAME}
    labels:
      projectid: ${PROJECT_ID}
      component: ${LIBRARY_NAME}
  spec:
    source:
      git:
        uri: ${LIBRARY_GIT_REPO}
        ref: ${GIT_BRANCH}
      type: Git
    triggers:
    - github:
        secret: ${PROJECT_ID}-${LIBRARY_NAME}
      type: GitHub
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: IS_SNAPSHOT
            description: If true, the build is a snapshot build for the library
            value: "true"
          - name: GIT_BRANCH
            description: branch to build
            value: ${GIT_BRANCH}
        jenkinsfile: |-
          properties([
              parameters(
                  [
                      booleanParam(name: 'IS_SNAPSHOT', defaultValue: true, description: "If true, the build is a snapshot build for the library"),
                      string(name: 'GIT_BRANCH',  defaultValue: "${GIT_BRANCH}", description: 'Git repo branch name', trim: true)
                  ]
              )
          ])

          node() {
              def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${EL_CICD_META_INFO_NAME} -o json")))

              def scmMap = [$class: 'GitSCMSource',
                            remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                            credentialsId: cicdMetaData.data.EL_CICD_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
              library identifier: "el-CICD@${cicdMetaData.data.EL_CICD_BRANCH_NAME}", retriever: modernSCM(scmMap)

              el.initMetaData(cicdMetaData.data)
          }

          def args = [agent: '${CODE_BASE}',
                      isBuild: true,
                      pipelineTemplateName: '${PIPELINE_TEMPLATE_NAME}',
                      projectId: '${PROJECT_ID}',
                      libraryName: '${LIBRARY_NAME}',
                      gitBranch: params.GIT_BRANCH,
                      isSnapshot: params.IS_SNAPSHOT?.toString() == 'true']
          el.node(args)
          {
              buildLibrary(args)
          }
