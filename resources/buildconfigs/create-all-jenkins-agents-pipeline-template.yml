# SPDX-License-Identifier: LGPL-2.1-or-later

kind: Template
apiVersion: v1
metadata:
  name: create-all-jenkins-agents-template
parameters:
- name: EL_CICD_META_INFO_NAME
  description: Name oc config map holding el-CICD meta-info.
  displayName: EL_CICD_META_INFO_NAME
  required: true
objects:
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: create-all-jenkins-agents
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: UDPATE_JENKINS_IMAGE
            description: Do not update the Jenkins image
            value: "false"
          - name: IGNORE_DEFAULT_AGENT
            description: Do not build the default agent
            value: "false"
        jenkinsfile: |-
          properties([
              parameters(
                  [
                      booleanParam(name: 'UDPATE_JENKINS_IMAGE', defaultValue: false, description: 'Update the Jenkins image'),
                      booleanParam(name: 'IGNORE_DEFAULT_AGENT', defaultValue: false, description: 'Do not build default agent if true')
                  ]
              )
          ])

          node('master') {
              def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${EL_CICD_META_INFO_NAME} -o json")))

              def scmMap = [$class: 'GitSCMSource',
                              remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                              credentialsId: cicdMetaData.data.EL_CICD_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
              library identifier: "el-CICD@${cicdMetaData.data.EL_CICD_BRANCH_NAME}", retriever: modernSCM(scmMap)

              el.init(cicdMetaData.data)
          }

          elCicdNode(agent: el.cicd.JENKINS_AGENT_DEFAULT) {
              createAllJenkinsAgents(updateJenkinsImage: params.UDPATE_JENKINS_IMAGE == 'true',
                                     ignoreDefaultAgent: params.IGNORE_DEFAULT_AGENT == 'true')
          }
