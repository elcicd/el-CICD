# SPDX-License-Identifier: LGPL-2.1-or-later

kind: Template
apiVersion: v1
metadata:
  name: create-all-jenkins-agents-template
parameters:
- name: EL_CICD_META_INFO_NAME
  description: Name oc config map holding el-CICD meta-info.
  displayName: EL_CICD_META_INFO_NAME
  required: true
objects:
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: create-all-jenkins-agents
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: IGNORE_BASE
            description: Do not build the base Jenkins agent, or refresh the Jenkins image
            value: "false"
        jenkinsfile: |-
          properties([
              parameters(
                  [
                      string(name: 'IGNORE_BASE', defaultValue: 'false', description: 'Do not build the base Jenkins agent, or refresh Jenkins', trim: true)
                  ]
              )
          ])

          node('master') {
              def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${EL_CICD_META_INFO_NAME} -o json")))

              def scmMap = [$class: 'GitSCMSource',
                              remote: cicdMetaData.data.EL_CICD_UTILS_GIT_REPO,
                              credentialsId: cicdMetaData.data.EL_CICD_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
              library identifier: "el-CICD-utils@${cicdMetaData.data.EL_CICD_UTILS_BRANCH_NAME}", retriever: modernSCM(scmMap)

              el.init(cicdMetaData.data)
          }

          elCicdNode(agent: 'base') {
              createAllJenkinsAgents(ignoreBase: params.IGNORE_BASE == 'true')
          }
