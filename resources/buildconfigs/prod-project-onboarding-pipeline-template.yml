# SPDX-License-Identifier: LGPL-2.1-or-later

kind: Template
apiVersion: v1
metadata:
  name: prod-project-onboarding-template
parameters:
- name: EL_CICD_META_INFO_NAME
  description: Name oc config map holding el-CICD meta-info
  displayName: EL_CICD_META_INFO_NAME
  required: true
- name: PIPELINE_TEMPLATE_NAME
  description: Pipeline Template Name
  displayName: PIPELINE_TEMPLATE_NAME
  required: true
  value: prod-project-onboarding
objects:
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: ${PIPELINE_TEMPLATE_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: PROJECT_ID
            description: Project ID from auto-tracker, representing all microservices for a project
          - name: RECREATE_PROD
            description: If true, the prod namespace will be deleted and recreated from scratch for the project
            value: "false"
        jenkinsfile: |-
          properties([
              parameters(
                  [
                      string(name: 'PROJECT_ID', description: 'Project ID', trim: true)
                  ]
              )
          ])

          node('master') {
              def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${EL_CICD_META_INFO_NAME} -o json")))

              def scmMap = [$class: 'GitSCMSource',
                            remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                            credentialsId: cicdMetaData.data.EL_CICD_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
              library identifier: "el-CICD@${cicdMetaData.data.EL_CICD_BRANCH_NAME}", retriever: modernSCM(scmMap)

              el.initMetaData(cicdMetaData.data)
          }

          def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                      pipelineTemplateName: '${PIPELINE_TEMPLATE_NAME}',
                      projectId: params.PROJECT_ID]
          el.node(args)
          {
              prodProjectOnboarding(args)
          }