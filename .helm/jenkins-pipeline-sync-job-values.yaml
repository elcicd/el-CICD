elCicdDefs:
  JENKINS_SERVICE_NAME: jenkins

elCicdTemplates:
- templateName: job
  appName: jenkins-pipeline-sync
  image: ${JENKINS_SYNC_JOB_IMAGE}
  projectedVolumeLabels:
  - name: mounted-jenkins-jobs
    mountPath: /mnt/mounted-jobs
    labels:
    - jenkins-folder
    - jenkins-pipeline
  serviceAccountName: ${JENKINS_SERVICE_NAME}
  volumeMounts: 
  - mountPath: /home/${JENKINS_SERVICE_NAME}
    name: ${JENKINS_SERVICE_NAME}-agent-home
  volumes:
  - name: ${JENKINS_SERVICE_NAME}-agent-home
    persistentVolumeClaim:
      claimName: ${JENKINS_SERVICE_NAME}-agent-home
  command: ["/bin/bash"]
  args:
  - -c
  - pwd;
    id;
    echo "Syncing Jenkins pipelines";
    mkdir jobs;
    cp -rLv /mnt/mounted-jobs/* jobs;
    chmod 777 -R jobs;
    JENKINS_POD=$(oc get pods -o custom-columns=:.metadata.name | grep jenkins | grep -v sync);
    set -x;
    oc exec -i $JENKINS_POD -- find /var/lib/jenkins/jobs -name config.xml -exec rm -f {} \; ;
    set +x;
    tar czf - jobs | oc exec -i $JENKINS_POD -- tar xzvf - -C /var/lib/jenkins/;
    echo -n "HTTP CODE FROM JENKINS RESTART -> ";
    curl -ksS -o /dev/null -X POST -w '%{http_code}\n' -H "Authorization:Bearer $(oc whoami -t)" jenkins:8080/safeRestart;
    echo;
    until [[ $(curl -ksSL -o /dev/null -w "%{http_code}" jenkins:8080/login) != 200 ]]
    do
      echo "Waiting for Jenkins to restart...";
      sleep 3;
    done;
    echo;
    until [[ $(curl -ksSL -o /dev/null -w "%{http_code}" jenkins:8080/login) == 200 ]]
    do
      echo "Checking if Jenkins is up...";
      sleep 3;
    done;
    echo;
    echo "el-CICD Jenkins jobs updated";
  
- templateName: persistentVolumeClaim
  appName: ${JENKINS_SERVICE_NAME}-agent-home
  storageRequest: ${VOLUME_CAPACITY}
  accessMode: ReadWriteMany