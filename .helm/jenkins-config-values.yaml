elCicdDefs:
  JENKINS_SERVICE_NAME: jenkins
  DISABLE_ADMINISTRATIVE_MONITORS: "false"
  KUBERNETES_MASTER: https://kubernetes.default:443
  ENABLE_FATAL_ERROR_LOG_FILE: "false"
  JENKINS_UC_INSECURE: "false"

  CPU_REQUEST: 500m
  MEMORY_REQUEST: 256Mi

  JENKINS_VOLUME_MNTS:
  - mountPath: /var/lib/jenkins
    name: ${JENKINS_SERVICE_NAME}-data
  - mountPath: /mnt/jenkins
    name: ${JENKINS_SERVICE_NAME}-data
  JENKINS_VOLUMES:
  - name: ${JENKINS_SERVICE_NAME}-data
    persistentVolumeClaim:
      claimName: ${JENKINS_SERVICE_NAME}
  - name: ${JENKINS_SERVICE_NAME}-agent-home
    persistentVolumeClaim:
      claimName: ${JENKINS_SERVICE_NAME}-agent-home

elCicdTemplates:
- templateName: deployment
  appName: ${JENKINS_SERVICE_NAME}
  labels:
    name: ${JENKINS_SERVICE_NAME}
  image: ${JENKINS_IMAGE}
  command: ["/bin/bash"]
  args:
  - -c
  - if [[ -f $JENKINS_PLUGINS_FILE ]];
    then 
        echo "Installing Jenkins Plugins:" | tee -a /var/log/jenkins-startup.log;
        cat $JENKINS_PLUGINS_FILE | tee -a /var/log/jenkins-startup.log;

        echo;
        java -jar /usr/share/java/jenkins-plugin-manager.jar
            --war /usr/share/java/jenkins.war
            -f $JENKINS_PLUGINS_FILE
            --plugin-download-directory $JENKINS_HOME/plugins | tee -a /var/log/jenkins-startup.log;
    fi;

    java -Djenkins.install.runSetupWizard=false
         -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
         $JENKINS_JAVA_OVERRIDES
         -jar /usr/share/java/jenkins.war >> /var/log/jenkins-startup.log;
  strategyType: RollingUpdate
  imagePullSecret: ${JENKINS_IMAGE_PULL_SECRET}
  serviceAccountName: ${JENKINS_SERVICE_NAME}
  env:
  - name: JENKINS_JAVA_OVERRIDES
    value: -D-XX:+UseCompressedOops
  - name: OPENSHIFT_ENABLE_OAUTH
    value: ${OPENSHIFT_ENABLE_OAUTH}
  - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
    value: "true"
  - name: KUBERNETES_MASTER
    value: https://kubernetes.default:443
  - name: KUBERNETES_TRUST_CERTIFICATES
    value: "true"
  - name: JENKINS_SERVICE_NAME
    value: ${JENKINS_SERVICE_NAME}
  - name: JNLP_SERVICE_NAME
    value: ${JENKINS_SERVICE_NAME}
  - name: ENABLE_FATAL_ERROR_LOG_FILE
    value: ${ENABLE_FATAL_ERROR_LOG_FILE}
  - name: JENKINS_UC_INSECURE
    value: ${JENKINS_UC_INSECURE}
  ports:
    - name: httpport
      containerPort: 8080
    - name: jnlpport
      containerPort: 50000
  readinessProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 3
    timeoutSeconds: 240
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 420
    periodSeconds: 360
    timeoutSeconds: 240
  resources:
    limits:
      cpu: ${CPU_LIMIT}
      memory: ${MEMORY_LIMIT}
    requests:
      cpu: ${CPU_REQUEST}
      memory: ${MEMORY_REQUEST}
  volumeMounts: ${JENKINS_VOLUME_MNTS}
  volumes: ${JENKINS_VOLUMES}

- templateName: configMap
  appName: openshift-jenkins-login-plugin-config
  data:
    Overall-Administer: edit
    Overall-Read: view
    Job-Build: view
    Job-Cancel: view
    Job-Read: view

- templateName: service
  appName: ${JENKINS_SERVICE_NAME}
  ports:
  - name: https
    port: 8080
  - name: jnlpport
    port: 50000

- templateName: ingress
  appName: ${JENKINS_SERVICE_NAME}
  host: ${JENKINS_URL}

- templateName: serviceAccount
  appName: ${JENKINS_SERVICE_NAME}
  annotations:
    serviceaccounts.openshift.io/oauth-redirecturi.jenkins: https://${JENKINS_URL}/

- templateName: clusterRoleBinding
  appName: ${JENKINS_SERVICE_NAME}-${RELEASE_NAMESPACE}-nonroot-builder
  mustHaveProfiles:
  - cicd
  - okd
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:openshift:scc:nonroot-builder
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: clusterRoleBinding
  appName: ${JENKINS_SERVICE_NAME}-${RELEASE_NAMESPACE}-admin
  mustHaveProfiles:
  - onboarding
  ignoreAnyProfiles:
  - cicd
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: roleBinding
  appName: ${JENKINS_SERVICE_NAME}-edit
  anyProfiles:
  - cicd
  ignoreAnyProfiles:
  - onboarding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: clusterRoleBinding
  appName: ${JENKINS_SERVICE_NAME}-sealed-secrets-management
  anyProfiles:
  - cicd
  ignoreAnyProfiles:
  - onboarding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: sealed-secrets-management
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: persistentVolumeClaim
  appName: ${JENKINS_SERVICE_NAME}
  storageRequest: ${VOLUME_CAPACITY}
  accessMode: ReadWriteOnce
  
- templateName: persistentVolumeClaim
  appName: ${JENKINS_SERVICE_NAME}-agent-home
  storageRequest: ${VOLUME_CAPACITY}
  accessMode: ReadWriteMany
  
- templateName: configMap
  anyProfiles:
  - onboarding
  appName: ${EL_CICD_META_INFO_NAME}
  data: ${EL_CICD_META_INFO}
  
  
