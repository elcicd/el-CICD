#!/usr/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later
cd "$(dirname ${0})"


_BOLD=$(tput bold)
_REGULAR=$(tput sgr0)

set -o allexport

EL_CICD_DIR=$(pwd)
EL_CICD_SCRIPTS_DIR=${EL_CICD_DIR}/scripts

EL_CICD_HOME=$(dirname ${EL_CICD_DIR})

EL_CICD_CONFIG_DIR=${EL_CICD_HOME}/el-CICD-config

EL_CICD_SCRIPTS_RESOURCES_DIR=${EL_CICD_SCRIPTS_DIR}/resources

EL_CICD_RESOURCES_DIR=${EL_CICD_DIR}/resources
EL_CICD_TEMPLATES_DIR=${EL_CICD_RESOURCES_DIR}/templates
EL_CICD_HELM_DIR=${EL_CICD_DIR}/.helm

EL_CICD_CONFIG_HELM_DIR=${EL_CICD_CONFIG_DIR}/.helm
EL_CICD_CONFIG_BOOTSTRAP_DIR=${EL_CICD_CONFIG_DIR}/bootstrap
EL_CICD_CONFIG_JENKINS_DIR=${EL_CICD_CONFIG_DIR}/jenkins

TARGET_JENKINS_BUILD_DIR=${EL_CICD_HOME}/jenkins-target

set -e
echo
echo -n 'Loading el-CICD scripts...'
echo
for FILE in $(ls ${EL_CICD_SCRIPTS_DIR}/*.sh | xargs -n 1 basename)
do
    source "${EL_CICD_SCRIPTS_DIR}/${FILE}"
done
echo 'Loaded'

_load_kubectl_msgs

KUBECTL_ADM_ARGS=()
while [[ $# -gt 0 ]]
do
  case "${1}" in
    '--agents' | '-a')
        ELCICD_ADM_MSG="BUILD JENKINS AGENT IMAGES"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_build_el_cicd_jenkins_agent_images_image')
        shift 2
    ;;
    
    '--bootstrap' | '-b')
        BOOTSTRAP='true'
        ELCICD_ADM_MSG="BOOTSTRAPPING ${ONBOARDING_SERVER_TYPE} EL-CICD"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_bootstrap_el_cicd')
        shift 2
    ;;

    '--cicd-creds' | '-C')
        ELCICD_ADM_MSG="REFRESH ALL CICD SERVERS CREDENTIALS"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=("oc start-build refresh-credentials --wait --follow -n ${ONBOARDING_MASTER_NAMESPACE}")
        shift 2
    ;;
    
    '--config')
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('')
        shift 2
    ;;

    '--help' | '-h')
        echo
        echo "${HELP_MSG}"
        exit 0
    ;;

    '--jenkins' | '-j')
        ELCICD_ADM_MSG="BUILD JENKINS IMAGE"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_build_el_cicd_jenkins_image')
        shift 2
    ;;
    
    '--lab' | '-l')
        EL_CICD_LAB_INSTALL='true'
        shift
        ;;

    '--onboarding-creds' | '-c')
        ELCICD_ADM_MSG="REFRESH CREDENTIALS"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_refresh_${ONBOARDING_SERVER_TYPE/-/_}_credentials')
        shift 2
    ;;
    
    '--sealed-secrets' | '-s')
        ELCICD_ADM_MSG="INSTALL SEALED SECRETS"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_check_upgrade_sealed_secrets')
        shift 2
    ;;

    '--setup-lab' | '-L')
        ELCICD_ADM_MSG="BOOTSTRAPPING EL-CICD LAB ENVIRONMENT"
        EL_CICD_LAB_INSTALL='true'
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('__bootstrap_dev_environment')
        shift 2
    ;;

    '--start-crc')
        ELCICD_ADM_MSG="STARTING EL-CICD DEVELOPMENT ENVIRONMENT"
        EL_CICD_LAB_INSTALL='true'
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_start_crc')
        shift 2
    ;;

    '--tear-down-dev' | '-T')
        ELCICD_ADM_MSG="TEARING DOWN EL-CICD DEVELOPMENT ENVIRONMENT"
        ROOT_CONFIG_FILE=${2}

        EL_CICD_ADM_COMMANDS=('_tear_down_dev_environment')
        shift 2
    ;;

    -*|--*)
        echo
        echo "ERROR: Unknown command option '${1}'"
        echo
        echo "${HELP_MSG}"
        exit 1
    ;;
  esac
done

_create_and_source_meta_info_file
set +e


if [[ ! -z ${EL_CICD_ADM_COMMANDS} ]]
then
    _execute_kubectl_el_cicd_adm
fi

