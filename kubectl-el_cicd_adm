#!/usr/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later

cd "$(dirname ${0})"

read -r -d '' WARNING_MSG << EOM
===================================================================
WARNING:
SUDO AND CLUSTER ADMIN PRIVILEGES REQUIRED

WHEN USING THIS IN YOUR OWN CLUSTER:
    - FORK THE el-CICD AND el-CICD-config REPOSITORIES
    - CREATE YOUR OWN PUBLIC/KEYS AND CREDENTIALS AS NEEDED

ACCESS TO el-CICD ONBOARDING AUTOMATION SERVERS SHOULD BE RESTRICTED TO CLUSTER ADMINS
===================================================================
EOM

read -r -d '' HELP_MSG << EOM
Usage: oc el-cicd-adm [OPTION] [root-config-file]

el-CICD Admin Utility

Options:
    -N,   --non-prod:        bootstraps Non-prod el-CICD Onboarding Automation Server
    -n,   --non-prod-creds:  refresh Non-prod el-CICD Onboarding Automation Server credentials
    -P,   --prod:            bootstraps Prod el-CICD Onboarding Automation Server
    -p,   --prod-creds:      refresh Prod el-CICD Onboarding Automation Server credentials
    -c,   --cicd-creds:      run the refresh-credentials pipeline
    -s,   --sealed-secrets:  reinstall/upgrade Sealed Secrets
    -j,   --jenkins:         only build el-CICD Jenkins image
    -a,   --agents:          only build el-CICD Jenkins agent images
    -A,   --jenkins-agents:  build el-CICD Jenkins and Jenkins agent images
    -D,   --setup-dev:       setup an environment for developing el-CICD
    -T,   --tear-down-dev:      tear down an environment for developing el-CICD
          --help:            display this help text and exit

root-config-file:
    file name or path to a root configuration file relative the root of the el-CICD-config directory
EOM

read -r -d '' DEV_SETUP_WELCOME_MSG << EOM
Welcome to the el-CICD setup utility for developing with or on el-CICD.
Before completing the setup, please make sure of the following:

1) Log into an OKD cluster as cluster admin, or you can use Red Hat CodeReady Containers:
   https://developers.redhat.com/products/codeready-containers/overview
   NOTE: el-CICD can setup CodeReady Containers for you if requested.

2) Have a GitHub account and a personal access token with repo and admin:repo_hook privileges ready for use.

3) Have root priveleges on this machine. sudo password is required to complete setup.

el-CICD will perform the necessary setup for running the tutorial or developing with el-CICD:
    - Optionally setup CodeReady Containers, if downloaded to the el-CICD-dev directory and not currently installed.
    - Optionally setup up a Nexus3 image repository to mimic an external repository, with or without an NFS share.
    - Clone and push all el-CICD and demo project Git repositories into your GitHub account.
    - Install the Sealed Secrets controller onto your cluster

NOTE: This utility is idempotent and can be rerun mutliple times.
EOM

read -r -d '' DEV_TEAR_DOWN_WELCOME_MSG << EOM
Welcome to the el-CICD dev environment tear down utility.
Before beginning to tear down your environment, please make sure of the following:

1) Log into an OKD cluster as cluster admin, or you can use Red Hat CodeReady Containers:
   https://developers.redhat.com/products/codeready-containers/overview
   NOTE: el-CICD can setup CodeReady Containers for you if requested.

2) Have root priveleges on this machine. sudo password is required to complete setup.

el-CICD will optionally tear down:
    - CodeReady Containers
    - The cluster docker registry
    - Remove el-CICD repositories pushed to your Git host
EOM

set -o allexport

BOOTSTRAP_DIR=$(pwd)

EL_CICD_HOME=$(dirname ${BOOTSTRAP_DIR})

CLI_OPTION=${1}

ROOT_CONFIG_FILE=${2}

CONFIG_REPOSITORY=${BOOTSTRAP_DIR}/../el-CICD-config

case "${CLI_OPTION}" in
    '')
         echo "Usage: oc el-cicd-adm [OPTION] [root-config-file]"
         echo "Try 'el-cicd-adm --help' for more information."
         exit 1
    ;;

    '--help')
        echo "${HELP_MSG}"
        exit 0
    ;;

    *)
        if [[ ! -f ${CONFIG_REPOSITORY}/${ROOT_CONFIG_FILE} ]]
        then
            echo "ERROR: Uknown or missing [root-config-file]: ${ROOT_CONFIG_FILE}"
            echo
            echo "${HELP_MSG}"
            exit 1
        fi
    ;;
esac

SERVER_TYPE_PROD=prod
SERVER_TYPE_NON_PROD=non-prod

echo "${WARNING_MSG}"
sleep 2

SCRIPTS_DIR=${BOOTSTRAP_DIR}/scripts
SCRIPTS_RESOURCES_DIR=${SCRIPTS_DIR}/resources
SYSTEM_DEFAULT_CONFIG_FILE=${SCRIPTS_RESOURCES_DIR}/system-default.conf

RESOURCES_DIR=${BOOTSTRAP_DIR}/resources
BUILD_CONFIGS_DIR=${RESOURCES_DIR}/buildconfigs
TEMPLATES_DIR=${RESOURCES_DIR}/templates

CONFIG_REPOSITORY_BOOTSTRAP=${CONFIG_REPOSITORY}/bootstrap
CONFIG_REPOSITORY_JENKINS=${CONFIG_REPOSITORY}/jenkins

TARGET_JENKINS_BUILD_DIR=../jenkins-target

CLUSTER_API_HOSTNAME=$(oc whoami --show-server | awk -F '://' '{ print $2 }')

echo
echo 'Loading el-CICD environment...'

set -e
echo
for FILE in $(ls ${SCRIPTS_DIR}/*.sh | xargs -n 1 basename)
do
    echo "Sourcing file: ${FILE}"
    source "${SCRIPTS_DIR}/${FILE}"
done
set +e

_source_el_cicd_meta_info_files

echo
echo 'el-CICD environment loaded'

set +o allexport

echo
case ${CLI_OPTION} in

    '--non-prod' | '-N')
        echo "BOOTSTRAPPING NON-PROD"

        _bootstrap_el_cicd ${SERVER_TYPE_NON_PROD}
    ;;

    '--prod' | '-P')
        echo "BOOTSTRAPPING PROD"

        _bootstrap_el_cicd ${SERVER_TYPE_PROD}
    ;;

    '--non-prod-creds' | '-n')
        echo "REFRESH NON-PROD CREDENTIALS"

        _create_el_cicd_meta_info_config_map

        _refresh_non_prod_credentials
    ;;

    '--prod-creds' | '-p')
        echo "REFRESH PROD CREDENTIALS"

        _create_el_cicd_meta_info_config_map

        _refresh_prod_credentials
    ;;

    '--cicd-creds' | '-c')
        echo "REFRESH ALL CICD SERVERS CREDENTIALS"

        echo
        echo "Refreshing all CICD Servers in the cluster managed by ${ONBOARDING_MASTER_NAMESPACE}"
        oc start-build refresh-credentials --wait --follow -n ${ONBOARDING_MASTER_NAMESPACE}
    ;;

    '--sealed-secrets' | '-s')
        echo "INSTALL SEALED SECRETS"
        _check_sealed_secrets

        if [[ $(_is_true ${INSTALL_KUBESEAL})  == ${_TRUE} ]]
        then
            _install_sealed_secrets
        fi
    ;;

    '--jenkins' | '-j')
        echo "BUILD JENKINS IMAGE"
        _build_el_cicd_jenkins_image
    ;;

    '--agents' | '-a')
        echo "BUILD JENKINS AGENT IMAGES"
        _build_el_cicd_jenkins_agent_images_image
    ;;

    '--jenkins-agents' | '-A')
        echo "UPDATE JENKINS IMAGE AND BUILD JENKINS AGENT IMAGES"
        _build_el_cicd_jenkins_image

        _build_el_cicd_jenkins_agent_images_image
    ;;

    '--setup-dev' | '-D')
        echo "BOOTSTRAPPING EL-CICD DEVELOPMENT ENVIRONMENT"

        __bootstrap_dev_environment
    ;;

    '--tear-down-dev' | '-T')
        echo "TEARING DOWN EL-CICD DEVELOPMENT ENVIRONMENT"

        __tear_down_dev_environment
    ;;

    *)
        echo "ERROR: Unknown command option '${CLI_OPTION}'"
        echo
        echo "${HELP_MSG}"
        exit 1
    ;;
esac
