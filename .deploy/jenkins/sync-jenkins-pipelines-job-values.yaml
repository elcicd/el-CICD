elCicdDefs:
  JENKINS: jenkins
  MOUNT_DIR: /mnt/casc-config
  JOBS_DIR: jobs
  JENKINS_RELOAD_URL: ${JENKINS}:8080/reload
  JENKINS_RELOAD_CASC_URL: ${JENKINS}:8080/reload-configuration-as-code/?casc-reload-token=elcicd
  CURL_COMMAND: curl -ksSL -o /dev/null -f --retry 9 --retry-all-errors -X POST -w '%{http_code}\n'
  CURL_HEADER: -H "Authorization:Bearer $(oc whoami -t)" 
  OC_EXEC: oc exec -i $JENKINS_POD -n $JENKINS_NAMESPACE

elCicdTemplates:
- templateName: job
  objName: sync-${JENKINS}-pipeline
  image: ${JENKINS_SYNC_JOB_IMAGE}
  imagePullSecret: el-cicd-${JENKINS}-pull-secret
  env:
  - name: JENKINS_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  projectedVolumeLabels:
  - name: mounted-${JENKINS}-${JOBS_DIR}
    mountPath: ${MOUNT_DIR}
    labels:
    - ${JENKINS}-folder
    - ${JENKINS}-pipeline
  serviceAccountName: ${JENKINS}
  command: ["/bin/bash"]
  args:
  - -c
  - pwd;
    id;
    oc whoami;
    set -x;
    mkdir ${JOBS_DIR};
    cp -rLv ${MOUNT_DIR}/*.yaml ${JOBS_DIR};
    chmod 777 -R ${JOBS_DIR};
    cd ${JOBS_DIR};
    echo "Syncing Jenkins pipelines";
    JENKINS_POD=$(oc get pods -l name=${JENKINS} --no-headers -o custom-columns=:.metadata.name);
    ${OC_EXEC} -- find /var/lib/${JENKINS}/${JOBS_DIR} -name config.xml -exec rm -vf {} \; ;
    ${OC_EXEC} -- find ${JENKINS_CONFIG_FILE_PATH} -name \*.yaml -exec rm -vf {} \; ;
    tar -czf - *.yaml | ${OC_EXEC} -- tar -C ${JENKINS_CONFIG_FILE_PATH} -xzvf -;
    echo -n "HTTP CODE FROM JENKINS RESTART -> ";
    ${CURL_COMMAND} ${CURL_HEADER} ${JENKINS_RELOAD_URL} ;
    ${CURL_COMMAND} ${CURL_HEADER} ${JENKINS_RELOAD_CASC_URL} ;
    echo "el-CICD Jenkins ${JOBS_DIR} updated";