elCicdDefs:
  EL_CICD_AGENT: el.cicd.JENKINS_AGENT_DEFAULT
  JENKINS_FOLDER_TEMPLATE: |-
    jobs:
    - script: |-
        folder('${FOLDER_NAME}') {
          displayName('${FOOLDER_NAME}')
          description('el-CICD generated pipelines for ${FOOLDER_NAME}')
        }
        
  JENKINS_PIPELINE_DSL_TEMPLATE: |-
    jobs:
    - script: |-
        pipelineJob('${FOLDER_NAME}/${OBJ_NAME}') {
            authenticationToken('${AUTH_TOKEN}')
            disabled(false)
            displayName('${OBJ_NAME}')
            keepDependencies(false)
            ${PIPELINE_PARAMS}

            definition {
                cps {
                    script('''
                        node() {
                            def elcicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm $env.EL_CICD_META_INFO_NAME -o json")))
                            def elCicdData = elcicdMetaData.data

                            def scmMap = [$class: 'GitSCMSource',
                                          remote: elCicdData.EL_CICD_GIT_REPO,
                                          credentialsId: elCicdData.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@$elCicdData.EL_CICD_GIT_REPO_BRANCH_NAME", retriever: modernSCM(scmMap))

                            el.initMetaData(elCicdData)
                        }

                        def args = [
                            agent: ${EL_CICD_AGENT},
                            pipelineName: '${OBJ_NAME}',
                            ${EL_CICD_API_ARGS}
                        ]
                        el.node(args) {
                            ${EL_CICD_API_METHOD}(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }