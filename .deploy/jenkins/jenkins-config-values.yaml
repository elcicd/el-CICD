elCicdDefs:
  JENKINS_SERVICE_NAME: jenkins
  DISABLE_ADMINISTRATIVE_MONITORS: "false"
  KUBERNETES_MASTER: https://kubernetes.default:443
  ENABLE_FATAL_ERROR_LOG_FILE: "false"
  JENKINS_UC_INSECURE: "false"
  JENKINS_CONFIG: jenkins-config
  JENKINS_CASC_YAML: jenkins-casc.yaml
  JENKINS_PLUGINS_TXT: jenkins-plugins.txt

elCicdDefs-jenkinsPersistent:
  JENKINS_PERSISTENT_VOLUME_MNT:
    mountPath: /var/lib/jenkins
    name: ${JENKINS_SERVICE_NAME}-data
  JENKINS_PERSISTENT_VOLUME:
    name: ${JENKINS_SERVICE_NAME}-data
    persistentVolumeClaim:
      claimName: ${JENKINS_SERVICE_NAME}

elCicdTemplates:
- templateName: deployment
  objName: ${JENKINS_SERVICE_NAME}
  labels:
    name: ${JENKINS_SERVICE_NAME}
  image: ${JENKINS_IMAGE}
  command: ["/bin/bash"]
  args:
  - -c
  - if [[ -f $JENKINS_PLUGINS_FILE ]];
    then
        echo "Installing Jenkins Plugins:" | tee -a /var/log/jenkins-startup.log;
        cat $JENKINS_PLUGINS_FILE | tee -a /var/log/jenkins-startup.log;

        echo;
        java -jar /usr/share/java/jenkins-plugin-manager.jar
            --war /usr/share/java/jenkins.war
            -f $JENKINS_PLUGINS_FILE
            --plugin-download-directory $JENKINS_HOME/plugins | tee -a /var/log/jenkins-startup.log;
    fi;

    java -Djenkins.install.runSetupWizard=false
         -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
         $JENKINS_JAVA_OVERRIDES
         -jar /usr/share/java/jenkins.war >> /var/log/jenkins-startup.log;
  strategyType: RollingUpdate
  imagePullSecret: el-cicd-jenkins-pull-secret
  serviceAccountName: ${JENKINS_SERVICE_NAME}
  env:
  - name: JENKINS_JAVA_OVERRIDES
    value: -D-XX:+UseCompressedOops
  - name: OPENSHIFT_ENABLE_OAUTH
    value: ${OPENSHIFT_ENABLE_OAUTH}
  - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
    value: "true"
  - name: KUBERNETES_MASTER
    value: https://kubernetes.default:443
  - name: KUBERNETES_TRUST_CERTIFICATES
    value: "true"
  - name: JENKINS_SERVICE_NAME
    value: ${JENKINS_SERVICE_NAME}
  - name: JNLP_SERVICE_NAME
    value: ${JENKINS_SERVICE_NAME}
  - name: ENABLE_FATAL_ERROR_LOG_FILE
    value: ${ENABLE_FATAL_ERROR_LOG_FILE}
  - name: JENKINS_UC_INSECURE
    value: ${JENKINS_UC_INSECURE}
  - name: CASC_JENKINS_CONFIG
    value: ${JENKINS_CONFIG_FILE_PATH}/${JENKINS_CASC_YAML}
  - name: JENKINS_PLUGINS_FILE
    value: ${JENKINS_CONFIG_FILE_PATH}/${JENKINS_PLUGINS_TXT}
  ports:
    - name: httpport
      containerPort: 8080
    - name: jnlpport
      containerPort: 50000
  readinessProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 3
    timeoutSeconds: 240
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 420
    periodSeconds: 360
    timeoutSeconds: 240
  resources:
    limits:
      memory: ${JENKINS_MEMORY_LIMIT}
    requests:
      memory: ${JENKINS_MEMORY_LIMIT}
      cpu: ${JENKINS_CPU_REQUEST}
  volumeMounts:
  - name: ${JENKINS_CONFIG}
    mountPath: ${JENKINS_CONFIG_FILE_PATH}
  - ${JENKINS_PERSISTENT_VOLUME_MNT}
  volumes:
  - name: ${JENKINS_CONFIG}
    configMap:
      name: ${JENKINS_CONFIG}
      items:
      - key: ${JENKINS_CASC_YAML}
        path: ${JENKINS_CASC_YAML}
      - key: ${JENKINS_PLUGINS_TXT}
        path: ${JENKINS_PLUGINS_TXT}
  - ${JENKINS_PERSISTENT_VOLUME}

- templateName: service
  objName: ${JENKINS_SERVICE_NAME}
  ports:
  - name: https
    port: 8080
  - name: jnlpport
    port: 50000

- templateName: configMap
  objName: ${JENKINS_CONFIG}
  data:
    ${JENKINS_CASC_YAML}: |-
      ${JENKINS_CASC_FILE}
    ${JENKINS_PLUGINS_TXT}: |-
      ${JENKINS_PLUGINS_FILE}


- templateName: limitRange
  objName: jenkins
  limits:
  - default:
      memory: ${JENKINS_AGENT_MEMORY_LIMIT}
    defaultRequest:
      memory: ${JENKINS_AGENT_MEMORY_REQUEST}
      cpu: ${JENKINS_AGENT_CPU_REQUEST}
    type: Container

- templateName: configMap
  objName: openshift-jenkins-login-plugin-config
  mustHaveEveryProfile:
  - cicd
  - okd
  data:
    Overall-Administer: edit
    Overall-Read: elcicd-user
    Job-Build: elcicd-user
    Job-Cancel: elcicd-user
    Job-Read: elcicd-user

- templateName: ingress
  objName: ${JENKINS_SERVICE_NAME}
  host: ${JENKINS_URL}

- templateName: serviceAccount
  objName: ${JENKINS_SERVICE_NAME}
  annotations:
    serviceaccounts.openshift.io/oauth-redirecturi.jenkins: https://${JENKINS_URL}/

- templateName: clusterRoleBinding
  objName: ${JENKINS_SERVICE_NAME}-${RELEASE_NAMESPACE}-admin
  mustHaveAnyProfile:
  - onboarding
  mustNotHaveAnyProfile:
  - cicd
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: roleBinding
  objName: ${JENKINS_SERVICE_NAME}-${RELEASE_NAMESPACE}-nonroot-builder
  mustHaveAnyProfile:
  - cicd
  - okd
  mustNotHaveAnyProfile:
  - onboarding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:openshift:scc:nonroot-builder
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: roleBinding
  objName: ${JENKINS_SERVICE_NAME}-edit
  mustHaveAnyProfile:
  - cicd
  mustNotHaveAnyProfile:
  - onboarding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
    namespace: ${RELEASE_NAMESPACE}

- templateName: roleBinding
  objName: ${USER_GROUP}-jenkins-elcicd-user
  mustHaveEveryProfile:
  - user-group
  - okd
  mustNotHaveAnyProfile:
  - onboarding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: elcicd-user
  subjects:
  - kind: Group
    name: ${USER_GROUP}
    apiGroup: rbac.authorization.k8s.io

- templateName: roleBinding
  objName: ${USER_GROUP}-jenkins-elcicd-user
  mustHaveEveryProfile:
  - user-group
  mustNotHaveAnyProfile:
  - onboarding
  - okd
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects:
  - kind: Group
    name: ${USER_GROUP}
    apiGroup: rbac.authorization.k8s.io

- templateName: persistentVolumeClaim
  mustHaveAnyProfile:
  - jenkinsPersistent
  objName: ${JENKINS_SERVICE_NAME}
  storageRequest: ${VOLUME_CAPACITY}
  accessMode: ReadWriteMany

- templateName: configMap
  mustHaveAnyProfile:
  - onboarding
  objName: ${EL_CICD_META_INFO_NAME}
  data: ${EL_CICD_META_INFO}

- templateName: copyResource
  mustHaveAnyProfile:
  - cicd
  objName: ${EL_CICD_META_INFO_NAME}
  kind: ConfigMap
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${RELEASE_NAMESPACE}

- templateName: copyResource
  mustHaveAnyProfile:
  - cicd
  objName: el-cicd-jenkins-pull-secret
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${RELEASE_NAMESPACE}

- templateName: copyResource
  mustHaveAnyProfile:
  - cicd
  objNames: ${CICD_ENVS}
  objName: el-cicd-${}-pull-secret
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${RELEASE_NAMESPACE}

- templateName: copyResource
  mustHaveAnyProfile:
  - cicd
  objName: ${EL_CICD_BUILD_SECRETS_NAME}
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${RELEASE_NAMESPACE}


