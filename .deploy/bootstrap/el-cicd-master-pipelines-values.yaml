elCicdDefs:
  PIPELINE_CONFIG_MAP_DATA:
    contentKey: ${OBJ_NAME}
    ${OBJ_NAME}: ${PIPELINE_JOBS_DSL}
    path: ${OBJ_NAME}.yaml
  JENKINS_PIPELINE_LABEL:
    jenkins-pipeline: 'true'

elCicdTemplates-master-pipelines-defs:
- templateName: configMap
  objNames:
  - refresh-onboarded-projects
  - delete-project
  - delete-cicd-server
  labels: ${JENKINS_PIPELINE_LABEL}
  data: ${PIPELINE_CONFIG_MAP_DATA}

- templateName: configMap
  objName: non-prod-project-onboarding
  mustHaveAnyProfile:
  - nonprod
  labels: ${JENKINS_PIPELINE_LABEL}
  data: ${PIPELINE_CONFIG_MAP_DATA}

- templateName: configMap
  objName: prod-project-onboarding
  mustHaveAnyProfile:
  - prod
  labels: ${JENKINS_PIPELINE_LABEL}
  data: ${PIPELINE_CONFIG_MAP_DATA}

elCicdDefs-non-prod-project-onboarding:
  PIPELINE_JOBS_DSL: |-
    jobs:
    - script: |-
        pipelineJob('${OBJ_NAME}') {
            description('Create the non-prod CICD environments, server, and pipelines for a project')
            parameters {
                stringParam('TEAM_ID', null, 'Team Name')
                stringParam('PROJECT_ID', null, 'Project ID')
                booleanParam('REBUILD_CICD_ENVS', false, 'Should all CICD namespace environment(s) be destroyed and recreated from scratch?')
            }

            definition {
                cps {
                    script('''
                        node() {
                            def elcicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${env.EL_CICD_META_INFO_NAME} -o json")))
                            def elCicdData = elcicdMetaData.data

                            def scmMap = [$class: 'GitSCMSource',
                                          remote: elCicdData.EL_CICD_GIT_REPO,
                                          credentialsId: elCicdData.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@${elCicdData.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))

                            el.initMetaData(elCicdData)
                        }

                        def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                                    pipelineName: '${OBJ_NAME}',
                                    teamId: params.TEAM_ID,
                                    projectId: params.PROJECT_ID,
                                    rebuildCicdEnvs: params.REBUILD_CICD_ENVS]
                        el.node(args) {
                            nonProdProjectOnboarding(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }

elCicdDefs-refresh-onboarded-projects:
  PIPELINE_JOBS_DSL: |-
    jobs:
    - script: |-
          pipelineJob('${OBJ_NAME}') {
              description('Refresh the data, secrets, and pipelines for all onboarded projects')
              parameters {
              }

              definition {
                  cps {
                      script('''
                          node() {
                              def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${env.EL_CICD_META_INFO_NAME} -o json")))

                              def scmMap = [$class: 'GitSCMSource',
                                            remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                                            credentialsId: cicdMetaData.data.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                              library(identifier: "el-CICD@${cicdMetaData.data.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))

                              el.initMetaData(cicdMetaData.data)
                          }

                          def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                                      pipelineName: 'refresh-onboarded-projects',
                                      isNonProd: true]
                          el.node(args) {
                              refreshOnboardedProjects(args)
                          }
                      ''')
                      sandbox(true)
                  }
              }

              throttleConcurrentBuilds {
                  maxPerNode(1)
                  maxTotal(1)
              }
          }

elCicdDefs-delete-project:
  PIPELINE_JOBS_DSL: |-
    jobs:
    - script: |-
        pipelineJob('${OBJ_NAME}') {
            description('Delete an onboarded project')
            parameters {
                stringParam('TEAM_ID', null, 'Team Name')
                stringParam('PROJECT_ID', null, 'Project ID')
            }

            definition {
                cps {
                    script('''
                        node() {
                            def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${env.EL_CICD_META_INFO_NAME} -o json")))

                            def scmMap = [$class: 'GitSCMSource',
                                          remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                                          credentialsId: cicdMetaData.data.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@${cicdMetaData.data.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))

                            el.initMetaData(cicdMetaData.data)
                        }

                        def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                                    pipelineName: '${OBJ_NAME}',
                                    teamId: params.TEAM_ID,
                                    projectId: params.PROJECT_ID,]
                        el.node(args) {
                            projectDeletion(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }

elCicdDefs-delete-cicd-server:
  PIPELINE_JOBS_DSL: |-
    jobs:
    - script: |-
        pipelineJob('${OBJ_NAME}') {
            description("Delete an team's CICD server")
            parameters {
                stringParam('TEAM_ID', null, 'Team Name')
            }

            definition {
                cps {
                    script('''
                        node() {
                            def cicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${env.EL_CICD_META_INFO_NAME} -o json")))

                            def scmMap = [$class: 'GitSCMSource',
                                          remote: cicdMetaData.data.EL_CICD_GIT_REPO,
                                          credentialsId: cicdMetaData.data.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@${cicdMetaData.data.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))

                            el.initMetaData(cicdMetaData.data)
                        }

                        def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                                    pipelineName: '${OBJ_NAME}',
                                    teamId: params.TEAM_ID]
                        el.node(args) {
                            cicdServerDeletion(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }

elCicdDefs-prod-project-onboarding:
  PIPELINE_JOBS_DSL: |-
    jobs:
    - script: |-
        pipelineJob('${OBJ_NAME}') {
            description("Create a team's prod CICD server")
            parameters {
                stringParam('TEAM_ID', null, 'Team Name')
            }

            definition {
                cps {
                    script('''
                        node() {
                            def elcicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm ${env.EL_CICD_META_INFO_NAME} -o json")))
                            def elCicdData = elcicdMetaData.data

                            def scmMap = [$class: 'GitSCMSource',
                                          remote: elCicdData.EL_CICD_GIT_REPO,
                                          credentialsId: elCicdData.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@${elCicdData.EL_CICD_GIT_REPO_BRANCH_NAME}", retriever: modernSCM(scmMap))

                            el.initMetaData(elCicdData)
                        }

                        def args = [agent: el.cicd.JENKINS_AGENT_DEFAULT,
                                    pipelineName: '${OBJ_NAME},
                                    teamId: params.TEAM_ID]
                        el.node(args) {
                            prodProjectOnboarding(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }