elCicdDefs:
  JENKINS_FOLDER_TEMPLATE: |-
    jobs:
    - script: |-
        folder('${PROJECT_ID}') {
          displayName('${PROJECT_ID}')
          description('el-CICD generated pipelines for ${PROJECT_ID}')
        }
    
  SCM_BRANCH_BUILD_PARAM: |-
    stringParam('SCM_BRANCH', '${SCM_BRANCH}', 'Git branch/tag/hash to build')

  BUILD_COMPONENT_PARAMS: |-
    ${SCM_BRANCH_BUILD_PARAM}; choiceParam('DEPLOY_TO_NAMESPACE', ${BUILD_NAMESPACE_CHOICES}, 'Namespace to deploy to'); booleanParam('REINSTALL', true, 'Uninstall ${BASE_OBJ_NAME} before deploying build?')

  BUILD_ARTIFACT_PARAMS: |-
    ${SCM_BRANCH_BUILD_PARAM}; booleanParam('IS_SNAPSHOT', true, 'Is this a snapshot build?')
    
  JENKINS_PIPELINE_TEMPLATE: |-
    jobs:
    - script: |-
        pipelineJob('${PROJECT_ID}/${BASE_OBJ_NAME}') {
            authenticationToken('${AUTH_TOKEN}')
            disabled(false)
            displayName('${BASE_OBJ_NAME}')
            keepDependencies(false)
            parameters {
              ${PIPELINE_PARAMS}
            }

            definition {
                cps {
                    script('''
                        node() {          
                            def elcicdMetaData = (readJSON(text: sh(returnStdout: true, script: "oc get cm $env.EL_CICD_META_INFO_NAME -o json")))
                            def elCicdData = elcicdMetaData.data
                            
                            def scmMap = [$class: 'GitSCMSource',
                                          remote: elCicdData.EL_CICD_GIT_REPO,
                                          credentialsId: elCicdData.EL_CICD_GIT_REPO_READ_ONLY_GITHUB_PRIVATE_KEY_ID]
                            library(identifier: "el-CICD@$elCicdData.EL_CICD_GIT_REPO_BRANCH_NAME", retriever: modernSCM(scmMap))

                            el.initMetaData(elCicdData)
                        }

                        ${EL_CICD_API_ARGS}
                        el.node(args) {
                            ${EL_CICD_API_METHOD}(args)
                        }
                    ''')
                    sandbox(true)
                }
            }

            throttleConcurrentBuilds {
                maxPerNode(1)
                maxTotal(1)
            }
        }