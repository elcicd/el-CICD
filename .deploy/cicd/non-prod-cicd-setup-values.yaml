elCicdDefs:
  BUILD_COMPONENT_PIPELINE_LABELS:
    projectid: ${PROJECT_ID}
    component: ${BASE_OBJ_NAME}
    jenkins-pipeline: 'true'
    jenkins-build-pipeline: 'true'
  BUILD_ARTIFACT_PIPELINE_LABELS:
    projectid: ${PROJECT_ID}
    artifact: ${BASE_OBJ_NAME}
    jenkins-pipeline: 'true'
    jenkins-build-pipeline: 'true'
  SHARED_PIPELINE_LABELS:
    projectid: ${PROJECT_ID}
    jenkins-pipeline: 'true'
    jenkins-shared-pipeline: 'true'
  COMMON_BUILD_ARGS: |-
    teamId: '${TEAM_ID}',
    projectId: '${PROJECT_ID}',
    agent: '${CODE_BASE}',
    isBuild: true,
    pipelineName: '${OBJ_NAME}',
    scmBranch: params.SCM_BRANCH
  RELEASE_CANDIDATE_PARAMS: |-
    <hudson.model.ParametersDefinitionProperty>
        <parameterDefinitions>
          <hudson.model.StringParameterDefinition>
            <name>RELEASE_CANDIDATE_TAG</name>
            <description>${RELEASE_CANDIDATE_TAG_DESCRIPTION}</description>
            <trim>true</trim>
          </hudson.model.StringParameterDefinition>
        </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  RELEASE_CANDIDATE_ARGS: |-
    def args = [agent: ${JENKINS_AGENT_DEFAULT},
                pipelineName: '${OBJ_NAME}',,
                teamId: '${TEAM_ID}',
                projectId: ${PROJECT_ID},
                releaseCandidateTag: params.RELEASE_CANDIDATE_TAG]
  PROJECT_FOLDER_DATA:
    contentKey: config.xml
    config.xml: ${JENKINS_FOLDER}
    path: ${PROJECT_ID}/config.xml
    optional: 'true'
  PIPELINE_CONFIG_MAP_DATA:
    contentKey: config.xml
    config.xml: ${PIPELINE_TEMPLATE_XML}
    path: ${PROJECT_ID}/jobs/${OBJ_NAME}/config.xml
    optional: 'true'
  JENKINS_SERVICEACCOUNT_NAME: jenkins

elCicdTemplates:
- templateName: configMap
  objName: ${PROJECT_ID}-jenkins-folder
  labels:
    teamid: ${TEAM_ID}
    projectid: ${PROJECT_ID}
    jenkins-folder: 'true'
  data: ${PROJECT_FOLDER_DATA}

- templateName: configMap
  objNames: ${BUILD_COMPONENT_PIPELINES}
  objName: ${}-build-component
  labels: ${BUILD_COMPONENT_PIPELINE_LABELS}
  elCicdDefs:
    PIPELINE_PARAMS: ${BUILD_COMPONENT_PARAMS_XML}
    EL_CICD_API_CALL: |-
      def args = [${COMMON_BUILD_ARGS},
                  agentBuildDependencyCache: ${AGENT_BUILD_DEPENDENCY_CACHE},
                  componentName: '${BASE_OBJ_NAME}',
                  deployToNamespace: params.DEPLOY_TO_NAMESPACE,
                  recreate: params.REINSTALL]
      el.node(args) {
          buildComponent(args)
      }
    AUTH_TOKEN:
      ${PROJECT_ID}-${BASE_OBJ_NAME}-scm-repo-private-contentkey
  data: ${PIPELINE_CONFIG_MAP_DATA}

- templateName: configMap
  objNames: ${BUILD_ARTIFACT_PIPELINES}
  objName: ${}-build-artifact
  labels: ${BUILD_ARTIFACT_PIPELINE_LABELS}
  elCicdDefs:
    PIPELINE_PARAMS: ${BUILD_ARTIFACT_PARAMS_XML}
    EL_CICD_API_CALL: |-
      def args = [${COMMON_BUILD_ARGS},
                  artifactName: '${BASE_OBJ_NAME}',
                  isSnapshot: params.IS_SNAPSHOT]
      el.node(args) {
          buildArtifact(args)
      }
    AUTH_TOKEN:
      ${PROJECT_ID}-${BASE_OBJ_NAME}-scm-repo-private-contentkey
  data: ${PIPELINE_CONFIG_MAP_DATA}

- templateName: configMap
  objNames:
  - build-artifacts-and-components
  - promote-components
  - run-post-deployment-tests
  - redeploy-components
  - create-release-candidate
  - redeploy-release-candidate
  objName: ${#}-${}
  labels: ${SHARED_PIPELINE_LABELS}
  elCicdDefs:
    ARGS: |-
      def args = [teamId: '${TEAM_ID}',
                  projectId: '${PROJECT_ID}',
                  agent: el.cicd.JENKINS_AGENT_DEFAULT,
                  pipelineName: '${BASE_OBJ_NAME}',
                  ${EXTRA_ARGS}]
    EL_CICD_API_CALL: |-
      ${ARGS}
      el.node(args) {
          ${EL_CICD_API_METHOD}(args)
      }
  elCicdDefs-build-artifacts-and-components:
    EL_CICD_API_METHOD: buildArtifactsAndComponents
  elCicdDefs-promote-components:
    EL_CICD_API_METHOD: promoteComponents
  elCicdDefs-run-post-deployment-tests:
    EL_CICD_API_METHOD: runSystemTests
  elCicdDefs-redeploy-components:
    EL_CICD_API_METHOD: redeployComponents
    EXTRA_ARGS: "redeployEnv: params.REDEPLOY_ENVIRONMENT"
    PIPELINE_PARAMS: |-
      <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.ChoiceParameterDefinition>
              <name>REDEPLOY_ENVIRONMENT</name>
              <description>Environment</description>
              <choices class="java.util.Arrays$ArrayList">
                <a class="string-array">
                  ${REDEPLOY_ENV_CHOICES}
                </a>
              </choices>
            </hudson.model.ChoiceParameterDefinition>
          </parameterDefinitions>
      </hudson.model.ParametersDefinitionProperty>
  elCicdDefs-create-release-candidate:
    EL_CICD_API_METHOD: createReleaseCandidate
    EXTRA_ARGS: "releaseCandidateTag: params.RELEASE_CANDIDATE_TAG"
    PIPELINE_PARAMS: ${RELEASE_CANDIDATE_PARAMS}
    RELEASE_CANDIDATE_TAG_DESCRIPTION: "Release Candidate Tag (WARNING: DO NOT prefix your tag with a 'v')"
  elCicdDefs-redeploy-release-candidate:
    EL_CICD_API_METHOD: redeployReleaseCandidate
    EXTRA_ARGS: "releaseCandidateTag: params.RELEASE_CANDIDATE_TAG"
    PIPELINE_PARAMS: ${RELEASE_CANDIDATE_PARAMS}
    RELEASE_CANDIDATE_TAG_DESCRIPTION: "Previously used release candidate tag for redeployment to the project pre-prod environment"
  data: ${PIPELINE_CONFIG_MAP_DATA}

- templateName: roleBinding
  objName: ${PROJECT_ID}-edit
  namespaces: ${CICD_NAMESPACES}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICEACCOUNT_NAME}
    namespace: ${RELEASE_NAMESPACE}
  - kind: Group
    name: ${${NAME_SPACE}_GROUP}

- templateName: copyResource
  objNames: ${EL_CICD_GIT_REPOS_READ_ONLY_KEYS}
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${RELEASE_NAMESPACE}

- templateName: copyResource
  objNames: ${NONPROD_ENVS}
  objName: el-cicd-${}-pull-secret
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${PROJECT_ID}-${BASE_OBJ_NAME}

- templateName: copyResource
  objNames: ${SANDBOX_ENVS}
  srcMetadataName: el-cicd-${DEV_ENV}-pull-secret
  kind: Secret
  fromNamespace: ${EL_CICD_MASTER_NAMESPACE}
  toNamespace: ${PROJECT_ID}-${BASE_OBJ_NAME}

- templateName: persistentVolumeClaim
  mustHaveAnyProfile:
  - jenkinsAgentPersistent
  objName: jenkins-agent-home
  storageRequest: ${AGENT_VOLUME_CAPACITY}
  accessMode: ReadWriteMany


