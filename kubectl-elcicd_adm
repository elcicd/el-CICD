#!/usr/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later
cd "$(dirname ${0})"

set -e -o allexport

export _TRUE='true'
export _FALSE='false'

export _YES='Yes'
export _NO='No'

export HELM=helm
export JENKINS=jenkins

export USERNAME=username
export PASSWORD=password

__main() {
    __load_basic_vars_and_scripts

    _load_kubectl_msgs

    _echo_sudo_cluster_admin_warning
    
    set +e

    __parse_cli_flags "${@}"

    if [[ ${EL_CICD_MASTER_NONPROD} == ${_TRUE} || ${EL_CICD_MASTER_PROD} == ${_TRUE} ]]
    then
        __configure_for_bootstrapping_server
    fi

    _create_and_source_meta_info_files

    sleep 2

    _execute_kubectl_el_cicd_adm ${EL_CICD_ADM_COMMANDS[@]}
}

__parse_cli_flags() {
    EL_CICD_ADM_COMMANDS=()

    while [[ ${1} ]]
    do
        case "${1}" in
            '--agents' | '-A')
                EL_CICD_ADM_COMMANDS+=('_oci_jenkins_registry_login' '_build_el_cicd_jenkins_agent_images')

                unset JENKINS_SKIP_AGENT_BUILDS
                if [[ ${2} =~ ^--?[a-zA-Z0-9-]+$ ]]
                then
                    ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BUILD JENKINS AGENT IMAGES"
                else
                    while [[ ${3} && ${2} && ${2} =~ ^[a-zA-Z0-9][a-zA-Z0-9-]+$ ]]
                    do
                        shift
                        BUILD_AGENT_NAMES+="${1} "
                    done
                    ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BUILD JENKINS AGENT IMAGE(S) [$(echo ${BUILD_AGENT_NAMES} | xargs)]"
                fi
            ;;

            '--assumeyes' | '-y')
                EL_CICD_ASSUME_YES = ${_TRUE}
            ;;

            '--help' | '-h')
                echo
                echo "${EL_CICD_CLI_HELP_MSG}"
                exit 0
            ;;

            '--jenkins' | '-J')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BUILD JENKINS IMAGE"

                EL_CICD_ADM_COMMANDS+=('_oci_jenkins_registry_login' '_build_el_cicd_jenkins_image')
            ;;

            '--nonprod' | '-N')
                EL_CICD_MASTER_NONPROD=${_TRUE}
            ;;

            '--prod' | '-P')
                EL_CICD_MASTER_PROD=${_TRUE}
            ;;

            '--refresh-creds')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }REFRESH CREDENTIALS"

                EL_CICD_ADM_COMMANDS+=('_load_env_from_configmap' '_create_rbac_helpers' '_refresh_el_cicd_credentials')
            ;;

            '--refresh-cicd-creds')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }REFRESH ALL CICD SERVERS CREDENTIALS"

                echo 'WARNING: NEED TO IMPLEMENT REFRESH ALL CICD SERVERS CREDENTIALS'
            ;;

            '--sealed-secrets')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }INSTALL/UPGRADE SEALED SECRETS"

                EL_CICD_ADM_COMMANDS+=('_check_upgrade_install_sealed_secrets' '_create_rbac_helpers')
            ;;

            '--setup-lab' | '-L')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BOOTSTRAPPING EL-CICD LAB ENVIRONMENT"
                EL_CICD_USE_LAB_CONFIG='true'

                EL_CICD_ADM_COMMANDS+=('_oci_helm_registry_login' '_bootstrap_lab_environment')
            ;;

            '--start-cluster' | '-S')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }STARTING EL-CICD DEVELOPMENT ENVIRONMENT"
                EL_CICD_USE_LAB_CONFIG='true'

                EL_CICD_ADM_COMMANDS+=('_start_crc')
            ;;

            '--tear-down-lab' | '-T')
                ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }TEARING DOWN EL-CICD DEVELOPMENT ENVIRONMENT"
                EL_CICD_USE_LAB_CONFIG='true'

                EL_CICD_ADM_COMMANDS+=('_tear_down_lab_environment')
            ;;

            -?-[\w-]+)
                echo
                echo "ERROR: Unknown command option '${1}'"
                echo
                echo "${EL_CICD_CLI_HELP_MSG}"
                exit 1
            ;;

            [a-zA-Z0-9][a-zA-Z0-9-./]*)
                if [[ ${ROOT_CONFIG_FILE} || ! -f ${EL_CICD_CONFIG_DIR}/${1} ]]
                then
                    _unknown_cmd_opt_msg_and_exit
                fi

                ROOT_CONFIG_FILE=${EL_CICD_CONFIG_DIR}/${1}
            ;;

            *)
                if [[ -z ${ROOT_CONFIG_FILE} ]]
                then
                    echo
                    echo 'ERROR: ROOT CONFIGURATION FILE MUST BE SPECIFIED'
                    exit 1
                fi
            ;;
        esac
        shift
    done
}

__configure_for_bootstrapping_server() {
    EL_CICD_ADM_COMMANDS+=('_verify_git_secret_files_exist'
                           '_verify_oci_registry_secrets'
                           '_oci_helm_registry_login'
                           '_bootstrap_el_cicd')

    if [[ ${EL_CICD_MASTER_NONPROD} == ${_TRUE} && ${EL_CICD_MASTER_PROD} == ${_TRUE} ]]
    then
        ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BOOTSTRAPPING EL-CICD MASTER TO SUPPORT PROD AND NON-PROD"
    elif [[ ${EL_CICD_MASTER_NONPROD} == ${_TRUE} ]]
    then
        ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BOOTSTRAPPING EL-CICD MASTER TO SUPPORT NON-PROD"
    elif [[ ${EL_CICD_MASTER_PROD} == ${_TRUE} ]]
    then
        ELCICD_ADM_MSG+="${ELCICD_ADM_MSG:+ / }BOOTSTRAPPING EL-CICD MASTER TO SUPPORT PROD"
    fi
}

__load_basic_vars_and_scripts() {
    _BOLD=$(tput bold)
    _REGULAR=$(tput sgr0)

    EL_CICD_DIR=$(pwd)
    EL_CICD_SCRIPTS_DIR=${EL_CICD_DIR}/scripts

    EL_CICD_HOME=$(dirname ${EL_CICD_DIR})

    EL_CICD_CONFIG_DIR=${EL_CICD_HOME}/el-CICD-config

    EL_CICD_SCRIPTS_CONFIG_DIR=${EL_CICD_SCRIPTS_DIR}/config
    EL_CICD_SCRIPTS_RESOURCES_DIR=${EL_CICD_SCRIPTS_DIR}/resources

    EL_CICD_CONFIG_BOOTSTRAP_DIR=${EL_CICD_CONFIG_DIR}/bootstrap
    EL_CICD_CONFIG_JENKINS_DIR=${EL_CICD_CONFIG_DIR}/jenkins

    TARGET_JENKINS_BUILD_DIR=${EL_CICD_HOME}/jenkins-target

    EL_CICD_SCRIPTS=$(ls ${EL_CICD_SCRIPTS_DIR}/*.sh )
    for FILE in $(echo ${EL_CICD_SCRIPTS} | xargs -n 1 basename)
    do
        source "${EL_CICD_SCRIPTS_DIR}/${FILE}"
    done
}

__main "$@";

